import TelegramBot from 'node-telegram-bot-api';
import { storage } from '../storage';

class TelegramBotService {
  private bot: TelegramBot | null = null;
  private enabled: boolean = false;

  constructor() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      console.warn('TELEGRAM_BOT_TOKEN not configured - Telegram bot will be disabled');
      return;
    }
    
    this.bot = new TelegramBot(token);
    this.enabled = true;
  }

  async handleUpdate(update: any) {
    if (!this.enabled || !this.bot) return;
    if (update.message) {
      await this.handleMessage(update.message);
    }
  }

  private async handleMessage(message: any) {
    const chatId = message.chat.id;
    const text = message.text;

    if (text === '/start') {
      await this.handleStartCommand(chatId, message.from);
    } else if (text === '/mystats') {
      await this.handleMyStatsCommand(chatId, message.from);
    } else if (text === '/team') {
      await this.handleTeamCommand(chatId, message.from);
    } else if (text === '/leaderboard') {
      await this.handleLeaderboardCommand(chatId, message.from);
    } else if (text === '/goal') {
      await this.handleGoalCommand(chatId, message.from);
    } else if (text === '/help') {
      await this.handleHelpCommand(chatId);
    } else if (message.contact) {
      await this.handleContactShared(chatId, message.from, message.contact);
    }
  }

  private async handleStartCommand(chatId: number, from: any) {
    if (!this.bot) return;
    
    const welcomeText = `
üöï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É "–¶–∞—Ä—å –¢–∞–∫—Å–∏"!

–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. 
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.
    `;

    const keyboard = {
      reply_markup: {
        keyboard: [[{
          text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
          request_contact: true
        }]],
        one_time_keyboard: true,
        resize_keyboard: true
      }
    };

    await this.bot.sendMessage(chatId, welcomeText, keyboard);
  }

  private async handleContactShared(chatId: number, from: any, contact: any) {
    if (!this.bot) return;
    
    try {
      const phone = this.normalizePhone(contact.phone_number);
      let user = await storage.getUserByPhone(phone);

      if (!user) {
        // Check if user is in waitlist
        const waitlist = await storage.getWaitlist();
        const waitlistEntry = waitlist.find(w => w.phone === phone);

        if (!waitlistEntry) {
          await storage.addToWaitlist({
            phone,
            fullName: `${from.first_name || ''} ${from.last_name || ''}`.trim(),
            status: 'new'
          });

          await this.bot.sendMessage(chatId, `
‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!

–ù–æ–º–µ—Ä: ${phone}
–ò–º—è: ${from.first_name || ''} ${from.last_name || ''}

–í—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞.
          `);
          return;
        }

        await this.bot.sendMessage(chatId, `
‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.

–í—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É.
        `);
        return;
      }

      // Update Telegram user ID
      await storage.updateUser(user.id, { tgUserId: from.id });

      // Get current role and stats
      const activeSeason = await storage.getActiveSeason();
      if (!activeSeason) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞.');
        return;
      }

      const roleAssignment = await storage.getRoleAssignment(user.id, activeSeason.id);
      if (!roleAssignment) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ.');
        return;
      }

      const aggregates = await storage.getAggregatesSeasonBySeasonId(activeSeason.id);
      const userStats = aggregates.find(a => a.userId === user.id);

      const roleNames: Record<string, string> = {
        tsar: '–¶–∞—Ä—å',
        sotnik: '–°–æ—Ç–Ω–∏–∫',
        desyatnik: '–î–µ—Å—è—Ç–Ω–∏–∫',
        driver: '–í–æ–¥–∏—Ç–µ–ª—å'
      };

      const statsText = userStats ? `
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${userStats.total} —á –∏–∑ ${userStats.target} —á (${Math.round(Number(userStats.targetPercent))}%)
      ` : '';

      await this.bot.sendMessage(chatId, `
‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

üë§ ${user.fullName || '–£—á–∞—Å—Ç–Ω–∏–∫'}
üì± ${phone}
üëë –†–æ–ª—å: ${roleNames[roleAssignment.role] || roleAssignment.role}
üìÖ –°–µ–∑–æ–Ω: ${activeSeason.name}${statsText}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
/mystats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/team - –º–æ—è –∫–æ–º–∞–Ω–¥–∞
/leaderboard - –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
/goal - –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
/help - —Å–ø—Ä–∞–≤–∫–∞
      `, {
        reply_markup: {
          keyboard: [
            [{ text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }, { text: 'üë• –ú–æ—è –∫–æ–º–∞–Ω–¥–∞' }],
            [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥' }, { text: 'üéØ –¶–µ–ª—å' }],
            [{ text: '‚ùì –ü–æ–º–æ—â—å' }]
          ],
          resize_keyboard: true
        }
      });

    } catch (error) {
      console.error('Error handling contact:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleMyStatsCommand(chatId: number, from: any) {
    if (!this.bot) return;
    
    try {
      const user = await this.getUserByTelegramId(from.id);
      if (!user) {
        await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      const activeSeason = await storage.getActiveSeason();
      if (!activeSeason) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞.');
        return;
      }

      const roleAssignment = await storage.getRoleAssignment(user.id, activeSeason.id);
      const aggregates = await storage.getAggregatesSeasonBySeasonId(activeSeason.id);
      const userStats = aggregates.find(a => a.userId === user.id);

      if (!userStats) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      const today = new Date().toISOString().split('T')[0];
      const dailyAggregates = await storage.getAggregatesDailyBySeasonId(activeSeason.id);
      const todayStats = dailyAggregates.find(a => a.userId === user.id && a.workDate === today);

      let statsText = `
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üóìÔ∏è –°–µ–≥–æ–¥–Ω—è: ${todayStats ? Number(todayStats.personalHours) : 0} —á
`;

      if (roleAssignment?.role !== 'driver') {
        statsText += `
üë§ –õ–∏—á–Ω—ã–µ —á–∞—Å—ã: ${Number(userStats.personalTotal)} —á
üë• –ö–æ–º–∞–Ω–¥–Ω—ã–µ —á–∞—Å—ã: ${Number(userStats.teamTotal)} —á
`;
      }

      statsText += `
üìà –ò—Ç–æ–≥–æ –∑–∞ —Å–µ–∑–æ–Ω: ${Number(userStats.total)} —á
üéØ –¶–µ–ª—å —Å–µ–∑–æ–Ω–∞: ${Number(userStats.target)} —á
üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${Math.round(Number(userStats.targetPercent))}%
`;

      if (userStats.rankInGroup) {
        statsText += `\nüèÜ –ú–µ—Å—Ç–æ –≤ –≥—Ä—É–ø–ø–µ: ${userStats.rankInGroup}`;
      }

      await this.bot.sendMessage(chatId, statsText);

    } catch (error) {
      console.error('Error handling mystats:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }

  private async handleTeamCommand(chatId: number, from: any) {
    if (!this.bot) return;
    await this.bot.sendMessage(chatId, 'üë• –ö–æ–º–∞–Ω–¥–∞: —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }

  private async handleLeaderboardCommand(chatId: number, from: any) {
    if (!this.bot) return;
    
    try {
      const activeSeason = await storage.getActiveSeason();
      if (!activeSeason) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞.');
        return;
      }

      const topCenturions = await storage.getTopCenturions(activeSeason.id, 5);
      const topDrivers = await storage.getTopDrivers(activeSeason.id, 5);

      let leaderboardText = 'üèÜ –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∏\n\n';
      
      leaderboardText += 'üëë –¢–æ–ø –°–æ—Ç–Ω–∏–∫–æ–≤:\n';
      topCenturions.forEach((centurion, index) => {
        const position = index + 1;
        const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : `${position}.`;
        leaderboardText += `${emoji} ${centurion.user.fullName || centurion.user.phone} - ${Number(centurion.total)} —á (${Math.round(Number(centurion.targetPercent))}%)\n`;
      });

      leaderboardText += '\nüöó –¢–æ–ø –í–æ–¥–∏—Ç–µ–ª–µ–π:\n';
      topDrivers.forEach((driver, index) => {
        const position = index + 1;
        const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : `${position}.`;
        leaderboardText += `${emoji} ${driver.user.fullName || driver.user.phone} - ${Number(driver.personalTotal)} —á (${Math.round(Number(driver.targetPercent))}%)\n`;
      });

      await this.bot.sendMessage(chatId, leaderboardText);

    } catch (error) {
      console.error('Error handling leaderboard:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.');
    }
  }

  private async handleGoalCommand(chatId: number, from: any) {
    if (!this.bot) return;
    
    try {
      const user = await this.getUserByTelegramId(from.id);
      if (!user) {
        await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const activeSeason = await storage.getActiveSeason();
      if (!activeSeason) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞.');
        return;
      }

      const aggregates = await storage.getAggregatesSeasonBySeasonId(activeSeason.id);
      const userStats = aggregates.find(a => a.userId === user.id);

      if (!userStats) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      const progress = Number(userStats.targetPercent);
      const remaining = Number(userStats.target) - Number(userStats.total);
      const daysLeft = Math.max(0, Math.ceil((new Date(activeSeason.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)));

      const goalText = `
üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏

üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${Number(userStats.total)} –∏–∑ ${Number(userStats.target)} —á
üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.round(progress)}%
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${Math.max(0, remaining)} —á
üìÖ –î–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞: ${daysLeft}

${progress >= 100 ? 'üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!' : `üí™ –ù—É–∂–Ω–æ –≤ —Å—Ä–µ–¥–Ω–µ–º ${daysLeft > 0 ? Math.ceil(remaining / daysLeft) : 0} —á/–¥–µ–Ω—å`}
      `;

      await this.bot.sendMessage(chatId, goalText);

    } catch (error) {
      console.error('Error handling goal:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–π.');
    }
  }

  private async handleHelpCommand(chatId: number) {
    if (!this.bot) return;
    
    const helpText = `
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/mystats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/team - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
/leaderboard - –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
/goal - –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üì± –ö–æ–Ω—Ç–∞–∫—Ç: –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞

‚ÑπÔ∏è "–¶–∞—Ä—å –¢–∞–∫—Å–∏" - –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π —Ä–æ–ª–µ–π –∏ –∫–æ–º–∞–Ω–¥–Ω—ã–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏.
    `;

    await this.bot.sendMessage(chatId, helpText);
  }

  private async getUserByTelegramId(telegramId: number) {
    const users = await storage.getUsers();
    return users.find(u => u.tgUserId === telegramId);
  }

  private normalizePhone(phone: string): string {
    // Remove all non-digits and add +7 prefix for Russian numbers
    const digits = phone.replace(/\D/g, '');
    if (digits.startsWith('8') && digits.length === 11) {
      return '+7' + digits.slice(1);
    }
    if (digits.startsWith('7') && digits.length === 11) {
      return '+' + digits;
    }
    return '+' + digits;
  }

  async sendNotification(userId: number, message: string) {
    if (!this.bot) return;
    
    try {
      const user = await storage.getUser(userId);
      if (user?.tgUserId) {
        await this.bot.sendMessage(user.tgUserId, message);
      }
    } catch (error) {
      console.error('Error sending notification:', error);
    }
  }
}

export const telegramBot = new TelegramBotService();
