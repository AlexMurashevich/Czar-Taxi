import { storage } from '../storage';
import { telegramBot } from './telegram-bot';
import type { InsertNotification } from '@shared/schema';

export interface NotificationPayload {
  userId: number;
  type: string;
  title: string;
  message: string;
  deliveryMethod?: 'telegram' | 'websocket' | 'both';
}

class NotificationService {
  private wsClients: Set<any> = new Set();

  registerWebSocketClient(client: any) {
    this.wsClients.add(client);
  }

  unregisterWebSocketClient(client: any) {
    this.wsClients.delete(client);
  }

  async sendNotification(payload: NotificationPayload): Promise<void> {
    const deliveryMethod = payload.deliveryMethod || 'both';

    const notification: InsertNotification = {
      userId: payload.userId,
      type: payload.type,
      title: payload.title,
      message: payload.message,
      deliveryMethod,
      status: 'pending',
    };

    const created = await storage.createNotification(notification);

    const preferences = await storage.getNotificationPreferences(payload.userId);
    const eventPreference = preferences.find(p => p.eventType === payload.type);

    if (!eventPreference || !eventPreference.enabled) {
      await storage.updateNotificationStatus(created.id, 'skipped');
      return;
    }

    let telegramSent = false;
    let websocketSent = false;

    if ((deliveryMethod === 'telegram' || deliveryMethod === 'both') && eventPreference.telegramEnabled) {
      try {
        await telegramBot.sendNotification(payload.userId, `${payload.title}\n\n${payload.message}`);
        telegramSent = true;
      } catch (error) {
        console.error('Failed to send Telegram notification:', error);
      }
    }

    if ((deliveryMethod === 'websocket' || deliveryMethod === 'both') && eventPreference.websocketEnabled) {
      try {
        this.broadcastToWebSocket({
          type: 'notification',
          data: {
            id: created.id,
            userId: payload.userId,
            notificationType: payload.type,
            title: payload.title,
            message: payload.message,
            createdAt: created.createdAt,
          },
        });
        websocketSent = true;
      } catch (error) {
        console.error('Failed to send WebSocket notification:', error);
      }
    }

    const status = (telegramSent || websocketSent) ? 'sent' : 'failed';
    await storage.updateNotificationStatus(created.id, status, new Date());
  }

  async sendBulkNotifications(payloads: NotificationPayload[]): Promise<void> {
    await Promise.all(payloads.map(payload => this.sendNotification(payload)));
  }

  private broadcastToWebSocket(message: any) {
    const messageStr = JSON.stringify(message);
    this.wsClients.forEach(client => {
      try {
        if (client.readyState === 1) {
          client.send(messageStr);
        }
      } catch (error) {
        console.error('Error broadcasting to WebSocket client:', error);
      }
    });
  }

  async notifyRoleChange(userId: number, oldRole: string, newRole: string, seasonName: string): Promise<void> {
    const roleNames: Record<string, string> = {
      tsar: '–¶–∞—Ä—å',
      sotnik: '–°–æ—Ç–Ω–∏–∫',
      desyatnik: '–î–µ—Å—è—Ç–Ω–∏–∫',
      driver: '–í–æ–¥–∏—Ç–µ–ª—å'
    };

    const title = 'üéâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏';
    let message = `–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ —Å "${roleNames[oldRole] || oldRole}" –Ω–∞ "${roleNames[newRole] || newRole}" –≤ —Å–µ–∑–æ–Ω–µ "${seasonName}".`;

    if (newRole === 'tsar') {
      message += '\n\nüëë –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –¶–∞—Ä—ë–º!';
    } else if (newRole === 'sotnik' && oldRole === 'driver') {
      message += '\n\nüéñÔ∏è –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –ø–æ–≤—ã—à–µ–Ω—ã –¥–æ –°–æ—Ç–Ω–∏–∫–∞!';
    } else if (newRole === 'desyatnik' && oldRole === 'driver') {
      message += '\n\n‚≠ê –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ç–µ–ø–µ—Ä—å –î–µ—Å—è—Ç–Ω–∏–∫!';
    } else if (newRole === 'driver' && (oldRole === 'sotnik' || oldRole === 'desyatnik')) {
      message += '\n\nüí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å!';
    }

    await this.sendNotification({
      userId,
      type: 'role_change',
      title,
      message,
      deliveryMethod: 'both',
    });
  }

  async notifyGoalAchieved(userId: number, targetPercent: number, total: number, target: number, seasonName: string): Promise<void> {
    const title = 'üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!';
    const message = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${Math.round(targetPercent)}% –æ—Ç –≤–∞—à–µ–π —Ü–µ–ª–∏ –≤ —Å–µ–∑–æ–Ω–µ "${seasonName}".\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${total} —á–∞—Å–æ–≤ –∏–∑ ${target} —á–∞—Å–æ–≤.`;

    await this.sendNotification({
      userId,
      type: 'goal_achieved',
      title,
      message,
      deliveryMethod: 'both',
    });
  }

  async notifyRankingMilestone(userId: number, rank: number, role: string, seasonName: string): Promise<void> {
    const roleNames: Record<string, string> = {
      tsar: '–¶–∞—Ä—å',
      sotnik: '–°–æ—Ç–Ω–∏–∫',
      desyatnik: '–î–µ—Å—è—Ç–Ω–∏–∫',
      driver: '–í–æ–¥–∏—Ç–µ–ª—å'
    };

    let title = 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ';
    let message = '';

    if (rank === 1) {
      title = 'ü•á –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ!';
      message = `–í—ã –∑–∞–Ω—è–ª–∏ 1-–µ –º–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ ${roleNames[role] || role} –≤ —Å–µ–∑–æ–Ω–µ "${seasonName}"!`;
    } else if (rank === 2) {
      title = 'ü•à –í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ!';
      message = `–í—ã –∑–∞–Ω—è–ª–∏ 2-–µ –º–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ ${roleNames[role] || role} –≤ —Å–µ–∑–æ–Ω–µ "${seasonName}"!`;
    } else if (rank === 3) {
      title = 'ü•â –¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ!';
      message = `–í—ã –∑–∞–Ω—è–ª–∏ 3-–µ –º–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ ${roleNames[role] || role} –≤ —Å–µ–∑–æ–Ω–µ "${seasonName}"!`;
    } else if (rank <= 10) {
      title = '‚≠ê –¢–æ–ø-10!';
      message = `–í—ã –≤–æ—à–ª–∏ –≤ —Ç–æ–ø-10 (–º–µ—Å—Ç–æ ${rank}) —Å—Ä–µ–¥–∏ ${roleNames[role] || role} –≤ —Å–µ–∑–æ–Ω–µ "${seasonName}"!`;
    } else {
      message = `–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: ${rank} –º–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ ${roleNames[role] || role} –≤ —Å–µ–∑–æ–Ω–µ "${seasonName}".`;
    }

    await this.sendNotification({
      userId,
      type: 'ranking_update',
      title,
      message,
      deliveryMethod: 'both',
    });
  }

  async notifyDailySummary(userId: number, dailyHours: number, totalHours: number, targetPercent: number): Promise<void> {
    const title = 'üìä –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞';
    const message = `–°–µ–≥–æ–¥–Ω—è –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${dailyHours} —á–∞—Å–æ–≤\n–í—Å–µ–≥–æ –∑–∞ —Å–µ–∑–æ–Ω: ${totalHours} —á–∞—Å–æ–≤\n–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏: ${Math.round(targetPercent)}%`;

    await this.sendNotification({
      userId,
      type: 'daily_summary',
      title,
      message,
      deliveryMethod: 'both',
    });
  }
}

export const notificationService = new NotificationService();
